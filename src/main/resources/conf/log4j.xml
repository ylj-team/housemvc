<?xml version="1.0" encoding="GBK" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j='http://jakarta.apache.org/log4j/'> 

<!--
   日志级别 
   Level.ALL打开所有日志 
   Level.DEBUG 用于调试 
   Level.INFO 用于运行过程 
   Level.WARN 用于潜在的错误 
   Level.ERROR 用于错误事件 
   Level.FATAL 用于严重错误时间 
   Level.OFF 关闭所有日志
-->

<!--
   Log4j提供的appender有以下几种：
   org.apache.log4j.ConsoleAppender（控制台），
   org.apache.log4j.FileAppender（文件），
   org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
   org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
   org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
-->
<!-- ConversionPattern 

%c    输出所属类的全名，可写为 %c{Num} ,Num类名输出的范围  如："com.sun.aaa.classB", %C{2}将使日志输出输出范围为：aaa.classB
%d    输出日志时间其格式为 可指定格式 如 %d{HH:mm:ss},%d{yyy-MM-dd HH:mm:ss} 等
%l    输出日志事件发生位置，包括类目名、发生线程，在代码中的行数
%n    换行符
%m    输出代码指定信息，如info(“message”),输出message
%p    输出日志的优先级，即 FATAL ,ERROR 等
%r    输出从启动到显示该条日志信息所耗费的时间（毫秒数）
%t    输出产生该日志事件的线程名
 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
%d 代表日期
%p 代表级别,info,debug这些。
%c 代表类名
%t 代表线程，有可能是Main函数
%m 代表输出的信息，%n代表换行

-->
<!--
appender 部分是可用的日志输出方式定义，可以定义多个
-->

<!-- 
   设置通道STDOUT和输出方式：org.apache.log4j.ConsoleAppender
   只有本地调试时使用，线上不用
-->
<appender name="Console" class="org.apache.log4j.ConsoleAppender">
   <!--
    layout指定布局模式 其中，Log4j提供的layout有以下几种：
    org.apache.log4j.HTMLLayout（以HTML表格形式布局），
    org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
    org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
    org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
   -->
   <layout class="org.apache.log4j.PatternLayout">
    <!-- 设置输出文件项目和格式 -->
	
    <param name="ConversionPattern" value="[%-5p]%d{yyyy-MM-dd HH:mm:ss,SSS} [%t]%-c{1}: %m%n" />
    <!-- 底下提供另外一种格式 -->
    <!-- <param name="ConversionPattern" value="%l %d{ISO8601} - %p - %m%n" /> -->
   </layout>
   
   <filter class="org.apache.log4j.varia.LevelRangeFilter">
    <param name="LevelMin" value="INFO" />
    <param name="LevelMax" value="FATAL" />
   </filter>
</appender>


<!--
   设置通道INFO和输出方式：org.apache.log4j.DailyRollingFileAppender，
   保存日志到单独文件，文件大于阈值时自动分裂，保留指定数目的文件
-->
<appender name="InfoFile" class="org.apache.log4j.RollingFileAppender">
   <!-- 指定输出文件的位置 -->
   <param name="File" value="${webapp.root}/WEB-INF/logs/info.log" />
   <!-- 设置是否在重新启动服务时，在原有日志的基础添加新日志 -->
   <param name="Append" value="true" />
   <param name="MaxFileSize" value="5MB"/>
   <param name="MaxBackupIndex" value="10"/>
   <layout class="org.apache.log4j.PatternLayout">
    <param name="ConversionPattern" value="[%-5p]%d{yyyy-MM-dd HH:mm:ss} [%t]%-c{1}: %m%n" />
   </layout>
   <!-- 滤镜设置输出的级别 -->
   <filter class="org.apache.log4j.varia.LevelRangeFilter">
    <param name="LevelMin" value="INFO" />
    <param name="LevelMax" value="INFO" />
   </filter>
</appender>


<!--
   设置通道DEBUG和输出方式：org.apache.log4j.DailyRollingFileAppender，
   保存日志到单独文件，文件大于阈值时自动分裂，保留指定数目的文件
-->
<appender name="DebugFile" class="org.apache.log4j.RollingFileAppender">
   <!-- 指定输出文件的位置 -->
   <param name="File" value="${webapp.root}/WEB-INF/logs/debug.log" />
   <!-- 设置是否在重新启动服务时，在原有日志的基础添加新日志 -->
   <param name="Append" value="true" />
   <param name="MaxFileSize" value="5MB"/>
   <param name="MaxBackupIndex" value="10"/>
   <layout class="org.apache.log4j.PatternLayout">
    <param name="ConversionPattern" value="[%-5p]%d{yyyy-MM-dd HH:mm:ss} [%t]%-c{1}: %m%n" />
   </layout>
   <!-- 滤镜设置输出的级别 -->
   <filter class="org.apache.log4j.varia.LevelRangeFilter">
    <param name="LevelMin" value="DEBUG" />
    <param name="LevelMax" value="DEBUG" />
   </filter>
</appender>


<!--
   设置通道WARN和输出方式：org.apache.log4j.DailyRollingFileAppender，
   保存日志到单独文件，文件大于阈值时自动分裂，保留指定数目的文件
-->
<appender name="WarnFile" class="org.apache.log4j.RollingFileAppender">
   <!-- 指定输出文件的位置 -->
   <param name="File" value="${webapp.root}/WEB-INF/logs/warn.log" />
   <!-- 设置是否在重新启动服务时，在原有日志的基础添加新日志 -->
   <param name="Append" value="true" />
   <param name="MaxFileSize" value="5MB"/>
   <param name="MaxBackupIndex" value="10"/>
   <layout class="org.apache.log4j.PatternLayout">
    <param name="ConversionPattern" value="[%-5p]%d{yyyy-MM-dd HH:mm:ss} [%t]%-c{1}: %m%n" />
   </layout>
   <!-- 滤镜设置输出的级别 -->
   <filter class="org.apache.log4j.varia.LevelRangeFilter">
    <param name="LevelMin" value="WARN" />
    <param name="LevelMax" value="WARN" />
   </filter>
</appender>


<!--
   设置通道ERROR和输出方式：org.apache.log4j.DailyRollingFileAppender，
   保存日志到单独文件，文件大于阈值时自动分裂，保留指定数目的文件
-->
<appender name="ErrorFile" class="org.apache.log4j.RollingFileAppender">
   <!-- 指定输出文件的位置 -->
   <param name="File" value="${webapp.root}/WEB-INF/logs/error.log" />
   <!-- 设置是否在重新启动服务时，在原有日志的基础添加新日志 -->
   <param name="Append" value="true" />
   <param name="MaxFileSize" value="5MB"/>
   <param name="MaxBackupIndex" value="10"/>
   <layout class="org.apache.log4j.PatternLayout">
    <param name="ConversionPattern" value="[%-5p]%d{yyyy-MM-dd HH:mm:ss} [%t]%-c{1}- %m%n" />
   </layout>
   <!-- 滤镜设置输出的级别 -->
   <filter class="org.apache.log4j.varia.LevelRangeFilter">
    <param name="LevelMin" value="ERROR" />
    <param name="LevelMax" value="ERROR" />
   </filter>
</appender>



<!-- root部分定义了log4j的默认输出级别和方式 -->
<root>
   <priority value="debug" />
   <!-- 设置接收所有输出的通道，与前面的通道id相对应 -->
   <appender-ref ref="InfoFile" />
   <appender-ref ref="WarnFile" />
   <appender-ref ref="ErrorFile" />
   <appender-ref ref="DebugFile" />
   <appender-ref ref="Console" />
</root>

</log4j:configuration>
